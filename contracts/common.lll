;;;; ==========================================================================
;;;; @title NIHLIB
;;;; @author Noel Maersk <veox>

(seq
  ;;; =========================================================================
  ;;; MEMORY LAYOUT

  (def '*memloc-function-selector* 0x20)

  ;;; =========================================================================
  ;;; STORAGE LAYOUT

  ;; FIXME: put this somewhere :/
  (def '*storloc-owner*               0x00)

  ;; token balances
  ;; 0x 00000000 00000000 00000000 ........ ........ ........ ........ ........
  (def '*storloc-base-balances*
       0x0000000000000000000000000000000000000000000000000000000000000000)

  ;; TODO: consider packing allowance itself and its expiry into same storage
  ;;       slot: a balance racked up in a thousand years is about 31.5 billion,
  ;;       which still fits in 35 bits; so perhaps no need to waste space

  ;; allowances: other to other (hash-packed)
  ;; 0x 0100.... ........ ........ ........ ........ ........ ........ ........
  (def '*storloc-base-allowances*
       0x0100000000000000000000000000000000000000000000000000000000000000)
  ;; 0x 0200.... ........ ........ ........ ........ ........ ........ ........
  (def '*storloc-base-allowance-expires*
       0x0200000000000000000000000000000000000000000000000000000000000000)
  ;; allowances: from this very token's owner
  ;; 0x 01010000 00000000 00000000 ........ ........ ........ ........ ........
  (def '*storloc-base-allowances-from-this*
       0x0101000000000000000000000000000000000000000000000000000000000000)
  ;; 0x 02010000 00000000 00000000 ........ ........ ........ ........ ........
  (def '*storloc-base-allowance-from-this-expires*
       0x0201000000000000000000000000000000000000000000000000000000000000)
  ;; allowances: to this very token's owner
  ;; 0x 01020000 00000000 00000000 ........ ........ ........ ........ ........
  (def '*storloc-base-allowances-to-this*
       0x0102000000000000000000000000000000000000000000000000000000000000)
  ;; 0x 02020000 00000000 00000000 ........ ........ ........ ........ ........
  (def '*storloc-base-allowance-to-this-expires*
       0x0202000000000000000000000000000000000000000000000000000000000000)

  ;; which library implements this function?
  ;; 0x ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff 00000000 ........
  (def '*storloc-base-implementing-lib*
       0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000)
  ;; what is the size of data this function returns?
  ;; 0x ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff 10000000 ........
  (def '*storloc-base-return-size*
       0xffffffffffffffffffffffffffffffffffffffffffffffff1000000000000000)

  ;;; =========================================================================
  ;;; CONSTANTS

  ;; booleans
  (def '*false* 0)
  (def '*true*  1)

  ;;; =========================================================================
  ;;; UTILS

  ;; --------------------------------------------------------------------------
  ;; @author Daniel Ellison <zigguratt>
  ;; @notice Shifts the leftmost 4 bytes of a 32-byte number right by 28 bytes.
  ;; @dev 0x14ab90388092664827928d90384c73d82c5bf21abb61dd7d4971fc65f4851dfb
  ;;      0x0000000000000000000000000000000000000000000000000000000014ab9038
  ;; @param input A 32-byte number.

  (def 'shift-right (input)
       (div input (exp 2 224)))

  (def 'pad-right (input)
       TODO)

  ;;; =========================================================================
  ;;; WEB3 ABI

  ;; --------------------------------------------------------------------------
  ;; @author Daniel Ellison <zigguratt>
  ;; @notice Retrieves the requested function selector from the first four
  ;;         bytes of the call data.

  (def 'calldata-function-selector
       (shift-right (calldataload 0x00)))

  ;; --------------------------------------------------------------------------
  ;; @author Ben Edgington <benjaminion>
  ;; @notice Gets the function selector and stores it in memory for reference.
  ;; @dev The function selector is stored at a pre-defined memory location and
  ;;      can be read from there every time instead of accessing the call data.
  ;; TODO: consider lll-docs -> lll_abi.html#passing-data-to-a-function

  (def 'mstore-function-selector
       (mstore *memloc-function-selector*
               calldata-function-selector))

  ;; --------------------------------------------------------------------------
  ;; @author Daniel Ellison <zigguratt>
  ;; @notice Determines whether the supplied function selector matches a known
  ;;         one and executes <code-body> if so.
  ;; @dev The selector is in the leftmost four bytes of the call data:
  ;;      https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
  ;; @param function-selector The four-byte hash of a known function signature.
  ;; @param code-body The code to run in the case of a match.

  (def 'function (function-selector code-body)
       (when (= (mload *memloc-function-selector*) function-selector)
         code-body))

  ;; --------------------------------------------------------------------------
  ;; @author Noel Maersk <veox>, Daniel Ellison <zigguratt>
  ;; @notice Retrieves data return size for a given (in-mem) function selector.

  (def 'return-size (function-selector)
       (sload (+ *storloc-base-return-size* function-selector)))

  ;; --------------------------------------------------------------------------
  ;; @author Daniel Ellison <zigguratt>
  ;; @notice Forbid ether transfers.

  (def 'unpayable
       (when (callvalue) (revert 0 0))))
