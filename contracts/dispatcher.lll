;;;; ==========================================================================
;;;; @title dispatcher
;;;; @notice Storage doesn't move.
;;;; @dev Delegates calls to a compatible contract.
;;;; @author Daniel Ellison <zigguratt>, Noel Maersk <veox>

(seq
  (include "common.lll")

  ;;; =========================================================================
  ;;; ABI

  ;; Pure pass-through to oo.lll - see you there!

  ;;; =========================================================================
  ;;; INIT

  ;; minimal storage initialisation
  (sstore *storloc-owner* (caller)) ; TODO: do in oo.init()?
  (sstore *storloc-base-implementing-lib* TODO-get-stable-oo-address-from-ens)

  ;; store selector, making sure it's left-aligned in the memory slot
  (mstore *memloc-call-data* (shift-left *init* 224))
  ;; delegated call to oo.init()
  (delegatecall (- (gas) 1000) ; TODO: justify magicnum 1000
                (sload *storloc-base-implementing-lib*)
                *memloc-call-data* 4
                *memloc-return-data* 0)

  ;;; =========================================================================
  ;;; RUNTIME

  (returnlll
   (seq
     unpayable ; TODO: remove and allow ether transfers?

     ;; guard against no contract lib address having been set
     (when (= (sload *storloc-base-implementing-lib*) 0x00) (revert 0 0))

     ;; save function selector for use by macro return-size
     (mstore-function-selector)
     ;; copy all call data to memory
     (calldatacopy *memloc-call-data* 0x00 (calldatasize))

     ;; delegatecall, always to base lib; revert if unsuccessful
     (when (= *false*
              (delegatecall (- (gas) 1000) ; TODO: justify magicnum 1000
                            (sload *storloc-base-implementing-lib*)
                            *memloc-call-data*
                            (calldatasize)
                            *memloc-return-data*
                            (return-size (mload *memloc-function-selector*))))
       (revert 0 0))

       ;; how much was this function supposed to return?
     (mstore *memloc-scratchpad*
             (return-size (mload *memloc-function-selector*)))

     (if (!= (mload *memloc-scratchpad*) 0)
         ;; ...relay the returned data (if there was any)...
         (return *memloc-return-data* (mload *memloc-scratchpad*))
         ;; ...or just stop (if there wasn't);...
         (stop)))))
