;;;; ==========================================================================
;;;; @title dispatcher
;;;; @notice Storage doesn't move.
;;;; @dev Delegates calls to a compatible contract.
;;;; @author Daniel Ellison <zigguratt>, Noel Maersk <veox>

(seq
  (include "common.lll")

  ;;; =========================================================================
  ;;; ABI

  (def '*dispatcher* 0x00000000) ; Dispatcher(address)

  ;; Otherwise pure pass-through to oo.lll - see there!

  ;;; =========================================================================
  ;;; INIT

  ;; minimal storage initialisation
  (sstore *storloc-owner* (caller)) ; TODO: do in oo.init()?
  (sstore *storloc-default-lib-address* todo-get-stable-oo-address-from-ens)

  ;; delegated call to oo.init()
  (mstore *memloc-call-data* (pad-right *init*))
  (delegatecall (- (gas) 1000)
                (sload *storloc-default-lib-address*)
                *memloc-call-data* 4
                *memloc-return-data* 0)

  ;;; =========================================================================
  ;;; RUNTIME

  (returnlll
   (seq
     unpayable ; TODO: remove and allow ether transfers?

     ;; guard against no contract lib address having been set
     (when (= (sload *storloc-default-lib-address*) 0x00) (revert 0 0))

     ;; save function selector for use by macro return-size
     (mstore-function-selector)
     ;; copy all call data to memory
     (calldatacopy *memloc-call-data* 0x00 (calldatasize))
     ;; delegatecall while saving the result
     (mstore *memloc-return-code*
             (delegatecall (- (gas) 1000) ; TODO: justify magicnum 1000
                           (sload *storloc-default-lib-address*)
                           *memloc-call-data* (calldatasize)
                           *memloc-return-data* return-size))


     ;; If the call was successful, relay the data returned from the call,
     ;; making sure we include the right length of data. If there's no return
     ;; data, just end contract execution. If delegatecall failed, propagate
     ;; the EVM exception up.
     (if (= (mload *memloc-return-code*) true)
         (if (!= return-size 0)
             (return *memloc-return-data* return-size)
             (stop))
         (revert 0 0)))))
