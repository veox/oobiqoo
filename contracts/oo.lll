;;;; ==========================================================================
;;;; @title oo
;;;; @notice Base token library.
;;;; @dev Implements an ERC20-compatible token with oobiqoo extensions as a
;;;;      library delegated-to via a dispatcher.
;;;; @author Noel Maersk <veox>

(seq
  (include "common.lll.inc")

  ;;; =========================================================================
  ;;; ABI

  ;; ERC20
  (def '*get-owner*           0x8da5cb5b) ; owner()
  (def '*get-name*            0x06fdde03) ; name()
  (def '*get-symbol*          0x95d89b41) ; symbol()
  (def '*get-decimals*        0x313ce567) ; decimals()
  (def '*get-total-supply*    0x18160ddd) ; totalSupply()
  (def '*get-balance-of*      0x70a08231) ; balanceOf(address)
  (def '*transfer*            0xa9059cbb) ; transfer(address,uint256)
  (def '*transfer-from*       0x23b872dd) ; transferFrom(address,address,uint256)
  (def '*approve*             0x095ea7b3) ; approve(address,uint256)
  (def '*get-allowance*       0xdd62ed3e) ; allowance(address,address)
  ;; ERC165
  (def '*supports-interface*  0x01ffc9a7) ; supportsInterface(bytes4)
  ;; oo
  (def '*get-mintable*        0xf42598f0) ; get_mintable()
  (def '*get-def-approve-dur* 0x64f8ad1f) ; get_default_approval_duration()
  (def '*mint*                0x1249c58b) ; mint()
  (def '*mint-and-transfer*   0x52ec8a58) ; mint_and_transfer(address,uint256)
  (def '*approve-timed*       0x31ef916a) ; approve_timed(address,uint256,uint256)
  (def '*set-def-approve-dur* 0x320e6c01) ; set_default_approval_duration(uint256)
  (def '*transfer-other*      0xca607c4e) ; transfer_other(address,address,uint256)
  (def '*burn*                0x3a181577) ; burn(uint256)
  ;; oobiqoo
  (def '*claim-ens-name*      0x6c8dea3b) ; claim_ENS_name()
  ;; dispatcher
  (def '*init*                0xe1c7392a) ; init()
  (def '*upgrade*             0x00000000) ; upgrade(FIXME)

  ;;; =========================================================================
  ;;; EVENTS

  ;; ERC20
  (def '*event-transfer* ; Transfer(address,address,uint256)
       0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)
  (def '*event-approval* ; Approval(address,address,uint256)
       0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925)
  ;; oo
  (def '*event-def-approve-dur-set* ; default_approval_duration_set(uint256)
       0x0)
  (def '*event-burned*              ; burned(address,uint256)
       0x0)
  (def '*event-minted*              ; minted(uint256)
       0x0)

  ;;; =========================================================================
  ;;; STORAGE LAYOUT

  ;; single-slot configuration fields
  (def '*storloc-owner*           (+ *storbase-config* 0x00))
  (def '*storloc-name*            (+ *storbase-config* 0x01))
  (def '*storloc-symbol*          (+ *storbase-config* 0x02))
  (def '*storloc-decimals*        (+ *storbase-config* 0x03))
  (def '*storloc-total-supply*    (+ *storbase-config* 0x04))
  (def '*storloc-def-approve-dur* (+ *storbase-config* 0x05))

  ;; single-slot variables
  (def '*storloc-last-minted*     (+ *storbase-vars* 0x00))

  ;;; =========================================================================
  ;;; UTILS

  ;;
  (def 'sload-balance  (addr)     (sload  (+ *storbase-balance* addr)))
  (def 'sstore-balance (addr val) (sstore (+ *storbase-balance* addr) val))

  ;;
  (def 'owner (sload *storloc-owner*))
  (def 'mintable (- (timestamp) (sload *storloc-last-minted*)))

  ;;
  (def 'only-owner (unless (= (caller) owner) (revert 0 0)))

  ;;; =========================================================================
  ;;; INIT

  (seq
    unpayable

  ;;; =========================================================================
  ;;; RUNTIME

    (returnlll
     (seq
       unpayable ; TODO: remove?
       ;; FIXME: uncomment when testing properly as a library, not standalone
       ;; (when (= 0 (sload *storloc-owner*) (revert 0 0)))
       mstore-function-selector

       ;;; --------------------------------------------------------------------
       ;;; ERC20 writes
       (fun *transfer*
            (seq
              calldata-has-two-args
              (def '+from+   (caller))
              (def '+to+     cdload-arg1)
              (def '+amount+ cdload-arg2)
              (when-is-not-address +to+ (revert 0 0))
              (when (> +amount+ (sload-balance +from+)) (revert 0 0))

              (sstore-balance +from+ (- (sload-balance +from+) +amount+))
              (sstore-balance +to+   (+ (sload-balance +to+)   +amount+))

              (emit2 *event-transfer* +from+ +to+ +amount+ 32)
              (return *true*)))

       (fun *approve*
            (stop)) ; FIXME

       (fun *transfer-from*
            (stop)) ; FIXME

       ;;; --------------------------------------------------------------------
       ;;; oo writes

       (fun *mint*
            (seq
              only-owner

              ;; TODO: rework to just use stack
              (mstore *memloc-scratchpad* mintable)
              (sstore *storloc-last-minted* (timestamp))
              (sstore-balance owner (+ (sload-balance owner)
                                       (mload *memloc-scratchpad*)))

              ;; not using emit0 macro, since want direct memloc specification
              (log1 *event-minted* *memloc-scratchpad* 32)
              (return *memloc-scratchpad* 32)))

       (fun *mint-and-transfer*
            (stop)) ; FIXME

       (fun *approve-timed*
            (stop)) ; FIXME

       (fun *set-def-approve-dur*
            (stop)) ; FIXME

       (fun *transfer-other*
            (stop)) ; FIXME

       (fun *burn*
            (stop)) ; FIXME

       ;;; --------------------------------------------------------------------
       ;;; dispatcher writes

       (fun *upgrade*
            (stop)) ; FIXME

       (fun *init*
            (seq
              ;; FIXME: can still be called on lib if entry-guard not present!
              ;; should only be called once
              (unless (= 0 (sload *storloc-owner*))       (revert 0 0))
              (unless (= 0 (sload *storloc-last-minted*)) (revert 0 0))
              ;; populate configuration fields
              (sstore *storloc-owner* (caller))
              (sstore *storloc-last-minted* (timestamp))
              (sstore *storloc-def-approve-dur* (* 60 60 24 7))
              ;; success?..
              (return *true*)))

       ;;; --------------------------------------------------------------------
       ;;; oobiqoo writes

       (fun *claim-ens-name*
            (stop)) ; FIXME

       ;;; --------------------------------------------------------------------
       ;;; ERC20 reads

       (fun *get-owner*
            (return (sload *storloc-owner*)))

       (fun *get-name*
            (return (sload *storloc-name*)))

       (fun *get-symbol*
            (return (sload *storloc-symbol*)))

       (fun *get-decimals*
            (return (sload *storloc-decimals*)))

       (fun *get-total-supply*
            (return (sload *storloc-total-supply*)))

       (fun *get-balance-of*
            (seq
              calldata-has-one-arg
              (def '+addr+ cdload-arg1)
              (when-is-not-address +addr+ (revert 0 0))
              (return (sload (+ *storbase-balance* +addr+)))))

       (fun *get-allowance*
            (stop)) ; FIXME

       ;;; --------------------------------------------------------------------
       ;;; oo reads

       (fun *get-mintable*
            (return mintable))

       (fun *get-def-approve-dur*
            (return (sload *storloc-def-approve-dur*)))

       ;;; --------------------------------------------------------------------
       ;;; ERC165 reads

       (fun *supports-interface*
            (stop)) ; FIXME

       ;;; --------------------------------------------------------------------
       ;;; TODO: mo match

       (revert 0 0)))))
