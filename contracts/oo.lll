;;;; ==========================================================================
;;;; @title oo
;;;; @notice Base token library.
;;;; @dev Implements an ERC20-compatible token with oobiqoo extensions as a
;;;;      library delegated-to via a dispatcher.
;;;; @author Noel Maersk <veox>

(seq
  (include "common.lll.inc")

  ;;; =========================================================================
  ;;; ABI

  ;; ERC20
  (def '*get-owner*           0x8da5cb5b) ; owner()
  (def '*get-name*            0x06fdde03) ; name()
  (def '*get-symbol*          0x95d89b41) ; symbol()
  (def '*get-decimals*        0x313ce567) ; decimals()
  (def '*get-total-supply*    0x18160ddd) ; totalSupply()
  (def '*get-balance-of*      0x70a08231) ; balanceOf(address)
  (def '*transfer*            0xa9059cbb) ; transfer(address,uint256)
  (def '*transfer-from*       0x23b872dd) ; transferFrom(address,address,uint256)
  (def '*approve*             0x095ea7b3) ; approve(address,uint256)
  (def '*get-allowance*       0xdd62ed3e) ; allowance(address,address)
  ;; ERC165
  (def '*supports-interface*  0x01ffc9a7) ; supportsInterface(bytes4)
  ;; oo
  (def '*get-mint-allowance*  0xd14863a0) ; get_mint_allowance()
  (def '*get-def-approve-dur* 0x64f8ad1f) ; get_default_approval_duration()
  (def '*mint*                0x1249c58b) ; mint()
  (def '*mint-amount*         0xa0712d68) ; mint(uint256)
  (def '*mint-and-transfer*   0x52ec8a58) ; mint_and_transfer(address,uint256)
  (def '*approve-timed*       0x31ef916a) ; approve_timed(address,uint256,uint256)
  (def '*set-def-approve-dur* 0x320e6c01) ; set_default_approval_duration(uint256)
  (def '*transfer-other*      0xca607c4e) ; transfer_other(address,address,uint256)
  (def '*burn*                0x3a181577) ; burn(uint256)
  ;; oobiqoo
  (def '*claim-ens-name*      0x6c8dea3b) ; claim_ENS_name()
  ;; dispatcher
  (def '*init*                0xe1c7392a) ; init()
  (def '*upgrade*             0x00000000) ; upgrade(FIXME)

  ;;; =========================================================================
  ;;; STORAGE LAYOUT

  ;; single-slot configuration fields
  (def '*storloc-owner*           (+ *storbase-config* 0x00))
  (def '*storloc-name*            (+ *storbase-config* 0x01))
  (def '*storloc-symbol*          (+ *storbase-config* 0x02))
  (def '*storloc-decimals*        (+ *storbase-config* 0x03))
  (def '*storloc-total-supply*    (+ *storbase-config* 0x04))
  (def '*storloc-def-approve-dur* (+ *storbase-config* 0x05))

  ;;; =========================================================================
  ;;; INIT

  (seq
    unpayable

  ;;; =========================================================================
  ;;; RUNTIME

    (returnlll
     (seq
       unpayable
       mstore-function-selector

       (fun *transfer*
            (stop))
       (fun *approve*
            (stop))
       (fun *transfer-from*
            (stop))

       (fun *mint*
            (stop))
       (fun *mint-amount*
            (stop))
       (fun *mint-and-transfer*
            (stop))
       (fun *approve-timed*
            (stop))
       (fun *set-def-approve-dur*
            (stop))
       (fun *transfer-other*
            (stop))
       (fun *burn*
            (stop))

       (fun *upgrade*
            (stop))
       (fun *init*
            (stop))

       (fun *claim-ens-name*
            (stop))

       (fun *get-owner*
            (return *storloc-owner*))
       (fun *get-name*
            (return *storloc-name*))
       (fun *get-symbol*
            (return *storloc-symbol*))
       (fun *get-decimals*
            (return *storloc-decimals*))
       (fun *get-total-supply*
            (return *storloc-total-supply*))
       (fun *get-balance-of*
            (stop))
       (fun *get-allowance*
            (stop))

       (fun *supports-interface*
            (stop))

       (fun *get-mint-allowance*
            (stop))
       (fun *get-def-approve-dur*
            (return *storloc-def-approve-dur*))

       ;; TODO: mo match
       (revert 0 0)))))
